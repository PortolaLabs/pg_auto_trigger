// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: go/protos/column_matcher.proto

package ai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColumnMatcherClient is the client API for ColumnMatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColumnMatcherClient interface {
	MatchColumns(ctx context.Context, in *ColumnMatcherRequest, opts ...grpc.CallOption) (*ColumnMatcherResponse, error)
}

type columnMatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewColumnMatcherClient(cc grpc.ClientConnInterface) ColumnMatcherClient {
	return &columnMatcherClient{cc}
}

func (c *columnMatcherClient) MatchColumns(ctx context.Context, in *ColumnMatcherRequest, opts ...grpc.CallOption) (*ColumnMatcherResponse, error) {
	out := new(ColumnMatcherResponse)
	err := c.cc.Invoke(ctx, "/column_matcher.ColumnMatcher/MatchColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColumnMatcherServer is the server API for ColumnMatcher service.
// All implementations must embed UnimplementedColumnMatcherServer
// for forward compatibility
type ColumnMatcherServer interface {
	MatchColumns(context.Context, *ColumnMatcherRequest) (*ColumnMatcherResponse, error)
	mustEmbedUnimplementedColumnMatcherServer()
}

// UnimplementedColumnMatcherServer must be embedded to have forward compatible implementations.
type UnimplementedColumnMatcherServer struct {
}

func (UnimplementedColumnMatcherServer) MatchColumns(context.Context, *ColumnMatcherRequest) (*ColumnMatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchColumns not implemented")
}
func (UnimplementedColumnMatcherServer) mustEmbedUnimplementedColumnMatcherServer() {}

// UnsafeColumnMatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColumnMatcherServer will
// result in compilation errors.
type UnsafeColumnMatcherServer interface {
	mustEmbedUnimplementedColumnMatcherServer()
}

func RegisterColumnMatcherServer(s grpc.ServiceRegistrar, srv ColumnMatcherServer) {
	s.RegisterService(&ColumnMatcher_ServiceDesc, srv)
}

func _ColumnMatcher_MatchColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnMatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnMatcherServer).MatchColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column_matcher.ColumnMatcher/MatchColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnMatcherServer).MatchColumns(ctx, req.(*ColumnMatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ColumnMatcher_ServiceDesc is the grpc.ServiceDesc for ColumnMatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColumnMatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "column_matcher.ColumnMatcher",
	HandlerType: (*ColumnMatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchColumns",
			Handler:    _ColumnMatcher_MatchColumns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/protos/column_matcher.proto",
}
